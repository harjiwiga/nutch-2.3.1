/*******************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.nutch.storage;

import org.apache.avro.util.Utf8;
import org.apache.nutch.util.Bytes;

@SuppressWarnings("all")
public class Host extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Host\",\"namespace\":\"org.apache.nutch.storage\",\"fields\":[{\"name\":\"__g__dirty\",\"type\":\"bytes\",\"doc\":\"Bytes used to represent weather or not a field is dirty.\",\"default\":\"AA==\"},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":\"bytes\"},\"default\":{}},{\"name\":\"outlinks\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"default\":{}},{\"name\":\"inlinks\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"default\":{}}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    __G__DIRTY(0, "__g__dirty"),
    METADATA(1, "metadata"),
    OUTLINKS(2, "outlinks"),
    INLINKS(3, "inlinks"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "__g__dirty",
  "metadata",
  "outlinks",
  "inlinks",
  };
  
  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return Host._ALL_FIELDS.length;
  }  

  /** Bytes used to represent weather or not a field is dirty. */
  private java.nio.ByteBuffer __g__dirty = java.nio.ByteBuffer.wrap(new byte[1]);
  private java.util.Map<CharSequence,java.nio.ByteBuffer> metadata;
  private java.util.Map<CharSequence,CharSequence> outlinks;
  private java.util.Map<CharSequence,CharSequence> inlinks;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return __g__dirty;
    case 1: return metadata;
    case 2: return outlinks;
    case 3: return inlinks;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value) {
    switch (field$) {
    case 0: __g__dirty = (java.nio.ByteBuffer)(value); break;
    case 1: metadata = (java.util.Map<CharSequence,java.nio.ByteBuffer>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    case 2: outlinks = (java.util.Map<CharSequence,CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    case 3: inlinks = (java.util.Map<CharSequence,CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'metadata' field.
   */
  public java.util.Map<CharSequence,java.nio.ByteBuffer> getMetadata() {
    return metadata;
  }

  /**
   * Sets the value of the 'metadata' field.
   * @param value the value to set.
   */
  public void setMetadata(java.util.Map<CharSequence,java.nio.ByteBuffer> value) {
    this.metadata = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'metadata' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isMetadataDirty(java.util.Map<CharSequence,java.nio.ByteBuffer> value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'outlinks' field.
   */
  public java.util.Map<CharSequence,CharSequence> getOutlinks() {
    return outlinks;
  }

  /**
   * Sets the value of the 'outlinks' field.
   * @param value the value to set.
   */
  public void setOutlinks(java.util.Map<CharSequence,CharSequence> value) {
    this.outlinks = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'outlinks' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOutlinksDirty(java.util.Map<CharSequence,CharSequence> value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'inlinks' field.
   */
  public java.util.Map<CharSequence,CharSequence> getInlinks() {
    return inlinks;
  }

  /**
   * Sets the value of the 'inlinks' field.
   * @param value the value to set.
   */
  public void setInlinks(java.util.Map<CharSequence,CharSequence> value) {
    this.inlinks = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'inlinks' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInlinksDirty(java.util.Map<CharSequence,CharSequence> value) {
    return isDirty(3);
  }

  public boolean contains(String key) {
    return metadata.containsKey(new Utf8(key));
  }

  public String getValue(String key, String defaultValue) {
    if (!contains(key))
      return defaultValue;
    return Bytes.toString(metadata.get(new Utf8(key)));
  }

  public int getInt(String key, int defaultValue) {
    if (!contains(key))
      return defaultValue;
    return Integer.parseInt(getValue(key, null));
  }

  public long getLong(String key, long defaultValue) {
    if (!contains(key))
      return defaultValue;
    return Long.parseLong(getValue(key, null));
  }

  /** Creates a new Host RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new Host RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new Host RecordBuilder by copying an existing Host instance */
  public static Builder newBuilder(Host other) {
    return new Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToWriteOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for Host instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Host>
    implements org.apache.avro.data.RecordBuilder<Host> {

    private java.nio.ByteBuffer __g__dirty;
    private java.util.Map<CharSequence,java.nio.ByteBuffer> metadata;
    private java.util.Map<CharSequence,CharSequence> outlinks;
    private java.util.Map<CharSequence,CharSequence> inlinks;

    /** Creates a new Builder */
    private Builder() {
      super(Host.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Host instance */
    private Builder(Host other) {
            super(Host.SCHEMA$);
      if (isValidValue(fields()[0], other.__g__dirty)) {
        this.__g__dirty = (java.nio.ByteBuffer) data().deepCopy(fields()[0].schema(), other.__g__dirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.metadata)) {
        this.metadata = (java.util.Map<CharSequence,java.nio.ByteBuffer>) data().deepCopy(fields()[1].schema(), other.metadata);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outlinks)) {
        this.outlinks = (java.util.Map<CharSequence,CharSequence>) data().deepCopy(fields()[2].schema(), other.outlinks);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inlinks)) {
        this.inlinks = (java.util.Map<CharSequence,CharSequence>) data().deepCopy(fields()[3].schema(), other.inlinks);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'metadata' field */
    public java.util.Map<CharSequence,java.nio.ByteBuffer> getMetadata() {
      return metadata;
    }
    
    /** Sets the value of the 'metadata' field */
    public Builder setMetadata(java.util.Map<CharSequence,java.nio.ByteBuffer> value) {
      validate(fields()[1], value);
      this.metadata = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'metadata' field has been set */
    public boolean hasMetadata() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'metadata' field */
    public Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'outlinks' field */
    public java.util.Map<CharSequence,CharSequence> getOutlinks() {
      return outlinks;
    }
    
    /** Sets the value of the 'outlinks' field */
    public Builder setOutlinks(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[2], value);
      this.outlinks = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'outlinks' field has been set */
    public boolean hasOutlinks() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'outlinks' field */
    public Builder clearOutlinks() {
      outlinks = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'inlinks' field */
    public java.util.Map<CharSequence,CharSequence> getInlinks() {
      return inlinks;
    }
    
    /** Sets the value of the 'inlinks' field */
    public Builder setInlinks(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[3], value);
      this.inlinks = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'inlinks' field has been set */
    public boolean hasInlinks() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'inlinks' field */
    public Builder clearInlinks() {
      inlinks = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    @Override
    public Host build() {
      try {
        Host record = new Host();
        record.__g__dirty = fieldSetFlags()[0] ? this.__g__dirty : (java.nio.ByteBuffer) java.nio.ByteBuffer.wrap(new byte[1]);
        record.metadata = fieldSetFlags()[1] ? this.metadata : (java.util.Map<CharSequence,java.nio.ByteBuffer>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[1]));
        record.outlinks = fieldSetFlags()[2] ? this.outlinks : (java.util.Map<CharSequence,CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[2]));
        record.inlinks = fieldSetFlags()[3] ? this.inlinks : (java.util.Map<CharSequence,CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[3]));
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public Host newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends Host implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  				  /**
	   * Gets the value of the 'metadata' field.
		   */
	  public java.util.Map<CharSequence,java.nio.ByteBuffer> getMetadata() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'metadata' field.
		   * @param value the value to set.
	   */
	  public void setMetadata(java.util.Map<CharSequence,java.nio.ByteBuffer> value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'metadata' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isMetadataDirty(java.util.Map<CharSequence,java.nio.ByteBuffer> value) {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'outlinks' field.
		   */
	  public java.util.Map<CharSequence,CharSequence> getOutlinks() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'outlinks' field.
		   * @param value the value to set.
	   */
	  public void setOutlinks(java.util.Map<CharSequence,CharSequence> value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'outlinks' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOutlinksDirty(java.util.Map<CharSequence,CharSequence> value) {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inlinks' field.
		   */
	  public java.util.Map<CharSequence,CharSequence> getInlinks() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inlinks' field.
		   * @param value the value to set.
	   */
	  public void setInlinks(java.util.Map<CharSequence,CharSequence> value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inlinks' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInlinksDirty(java.util.Map<CharSequence,CharSequence> value) {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}